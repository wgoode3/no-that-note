{"version":3,"sources":["Components/NoteForm.jsx","Components/NoteList.jsx","App.js","serviceWorker.js","index.js"],"names":["NoteForm","props","useState","text","setText","errors","setErrors","onSubmit","e","preventDefault","axios","post","then","res","console","log","data","onNewNote","catch","err","placeholder","rows","cols","onChange","target","value","message","type","NoteList","edit","setEdit","notes","map","note","key","_id","autoFocus","onBlur","put","getNotes","update","onClick","href","delete","remove","App","setNotes","useEffect","get","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"kQA0CeA,EAtCE,SAACC,GAAW,IAAD,EAEFC,mBAAS,IAFP,mBAEnBC,EAFmB,KAEbC,EAFa,OAGEF,mBAAS,IAHX,mBAGnBG,EAHmB,KAGXC,EAHW,KAoB1B,OACE,0BAAMC,SAhBQ,SAACC,GACfA,EAAEC,iBACFC,IAAMC,KAAK,kCAAmC,CAACR,SAC5CS,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACTA,EAAIG,KAAKX,OACVC,EAAUO,EAAIG,KAAKX,SAEnBD,EAAQ,IACRH,EAAMgB,gBAGTC,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,QAK1B,6BACE,8BACEC,YAAY,oBACZC,KAAK,IACLC,KAAK,KACLC,SAAW,SAAAf,GAAC,OAAIJ,EAAQI,EAAEgB,OAAOC,QACjCA,MAAQtB,IAGRE,EAAOF,KAAO,2BAAKE,EAAOF,KAAKuB,SAAgB,IAEnD,2BAAOC,KAAK,aCqBHC,EAtDE,SAAC3B,GAAW,IAAD,EAEFC,mBAAS,GAFP,mBAEnB2B,EAFmB,KAEbC,EAFa,KA8B1B,OACE,4BACG7B,EAAM8B,MAAMC,KAAK,SAAAC,GAAI,OACpB,wBAAIC,IAAMD,EAAKE,KAEXN,IAASI,EAAKE,IACd,8BACEC,WAAS,EACTC,OAAS,SAAA7B,GAAC,OAlBP,SAACA,EAAG2B,GACjBL,EAAQ,GACRpB,IAAM4B,IAAN,0CAA6CH,GAAO,CAAChC,KAAMK,EAAEgB,OAAOC,QACjEb,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZZ,EAAMsC,cAEPrB,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,MAWJqB,CAAOhC,EAAGyB,EAAKE,OAE3BF,EAAK9B,MAET,0BAAMsC,QAAS,SAAAjC,GAAC,OA3BR2B,EA2BqBF,EAAKE,IA1B1CrB,QAAQC,IAAIoB,QACZL,EAAQK,GAFI,IAAIA,IA4BJF,EAAK9B,MAGX,uBAAGuC,KAAK,IAAID,QAAS,SAACjC,GAAD,OA1Cd,SAACA,EAAG2B,GACjB3B,EAAEC,iBACFK,QAAQC,IAAIoB,GACZzB,IAAMiC,OAAN,0CAAgDR,IAC7CvB,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZZ,EAAMsC,cAEPrB,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,MAkCMyB,CAAOpC,EAAGyB,EAAKE,OAA3C,cCjBKU,MA3Bf,WAAgB,IAAD,EAEa3C,mBAAS,IAFtB,mBAEN6B,EAFM,KAECe,EAFD,KAIbC,qBAAW,WACTR,MACC,IAEH,IAAMA,EAAW,WACf7B,IAAMsC,IAAI,mCACPpC,MAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZiC,EAASjC,EAAIG,SAEdE,OAAM,SAAAC,GAAG,OAAIL,QAAQC,IAAII,OAG9B,OACE,6BACE,qCACA,6BACA,kBAAC,EAAD,CAAUY,MAAQA,EAAQQ,SAAWA,IACrC,kBAAC,EAAD,CAAUtB,UAAYsB,MChBRU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjD,MAAK,SAAAkD,GACJA,EAAaC,gBAEd7C,OAAM,SAAA8C,GACLlD,QAAQkD,MAAMA,EAAMtC,c","file":"static/js/main.12f9d125.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\n\n\nconst NoteForm = (props) => {\n\n  const [text, setText] = useState(\"\");\n  const [errors, setErrors] = useState({});\n\n  const addNote = (e) => {\n    e.preventDefault();\n    axios.post(\"http://localhost:8000/api/notes\", {text})\n      .then(res => {\n        console.log(res);\n        if(res.data.errors) {\n          setErrors(res.data.errors);\n        } else {\n          setText(\"\");\n          props.onNewNote();\n        }\n      })\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <form onSubmit={ addNote }>\n      <div>\n        <textarea \n          placeholder=\"Your note here...\"\n          rows=\"5\"\n          cols=\"50\"\n          onChange={ e => setText(e.target.value) }\n          value={ text }\n        >\n        </textarea>\n        { errors.text ? <p>{ errors.text.message }</p> : \"\" }\n      </div>\n      <input type=\"submit\" />\n    </form>\n  );\n}\n\nexport default NoteForm;","import React, { useState, useEffect } from 'react';\nimport axios from \"axios\";\n\n\nconst NoteList = (props) => {\n\n  const [edit, setEdit] = useState(0);  \n\n  const remove = (e, _id) => {\n    e.preventDefault();\n    console.log(_id);\n    axios.delete(`http://localhost:8000/api/notes/${_id}`)\n      .then(res => {\n        console.log(res);\n        props.getNotes();\n      })\n      .catch(err => console.log(err));\n  }\n\n  const thing = (e, _id) => {\n    console.log(_id);\n    setEdit(_id);\n  }\n\n  const update = (e, _id) => {\n    setEdit(0);\n    axios.put(`http://localhost:8000/api/notes/${_id}`, {text: e.target.value})\n      .then(res => {\n        console.log(res);\n        props.getNotes();\n      })\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <ul>\n      {props.notes.map( note =>\n        <li key={ note._id } >\n          {\n            edit === note._id ?\n            <textarea \n              autoFocus\n              onBlur={ e => update(e, note._id) }\n            >\n              { note.text }\n            </textarea> : \n            <span onClick={e => thing(e, note._id)}>\n              { note.text }\n            </span>\n          }\n          <a href=\"#\" onClick={(e) => remove(e, note._id)}>&times;</a>\n        </li>\n      )}\n    </ul>\n  );\n\n}\n\nexport default NoteList;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport NoteForm from \"./Components/NoteForm\";\nimport NoteList from \"./Components/NoteList\";\n\nfunction App() {\n\n  const [notes, setNotes] = useState([]);\n\n  useEffect( () => {\n    getNotes();\n  }, []);\n\n  const getNotes = () => {\n    axios.get(\"http://localhost:8000/api/notes\")\n      .then(res => {\n        console.log(res);\n        setNotes(res.data);\n      })\n      .catch(err => console.log(err));\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <hr />\n      <NoteList notes={ notes } getNotes={ getNotes } />\n      <NoteForm onNewNote={ getNotes } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}